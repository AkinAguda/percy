initSidebarItems({"enum":[["Patch","A Patch encodes an operation that modifies a real DOM element."],["VirtualNode","When building your views you'll typically use the `html!` macro to generate `VirtualNode`'s."]],"fn":[["diff","Given two VirtualNode's generate Patch's that would turn the old virtual node's real DOM node equivalent into the new VirtualNode's real DOM node equivalent."],["patch","Apply all of the patches to our old root node in order to create the new root node that we desire. This is usually used after diffing two virtual nodes."],["window","Getter for the `Window` object"]],"macro":[["html","Used to generate VirtualNode's from a TokenStream."]],"mod":[["console",""],["prelude","Exports structs and macros that you'll almost always want access to in a virtual-dom powered application"],["virtual_node_test_utils","A collection of functions that are useful for unit testing your html! views."]],"struct":[["CharacterData","The `CharacterData` class."],["Closure","A handle to both a closure in Rust as well as JS closure which will invoke the Rust closure."],["Comment","The `Comment` class."],["CreatedNode","A node along with all of the closures that were created for that node's events and all of it's child node's events."],["Document","The `Document` class."],["DomTokenList","The `DomTokenList` class."],["DomUpdater","Used for keeping a real DOM node up to date based on the current VirtualNode and a new incoming VirtualNode that represents our latest DOM state."],["Element","The `Element` class."],["Event","The `Event` class."],["EventTarget","The `EventTarget` class."],["Events","We need a custom implementation of fmt::Debug since JsValue doesn't implement debug."],["HtmlCollection","The `HtmlCollection` class."],["HtmlElement","The `HtmlElement` class."],["HtmlInputElement","The `HtmlInputElement` class."],["InputEvent","The `InputEvent` class."],["IterableNodes","Used by the html! macro for all braced child nodes so that we can use any type that implements Into"],["MessageEvent","The `MessageEvent` class."],["MouseEvent","The `MouseEvent` class."],["Node","The `Node` class."],["NodeList","The `NodeList` class."],["Text","The `Text` class."],["UiEvent","The `UiEvent` class."],["VElement",""],["VText",""],["Window","The `Window` class."],["Worker","The `Worker` class."]],"trait":[["View","A trait with common functionality for rendering front-end views."]],"type":[["DynClosure","Box<dyn AsRef>> is our js_sys::Closure. Stored this way to allow us to store any Closure regardless of the arguments."]]});